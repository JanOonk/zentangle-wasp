// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;

use crate::*;
use crate::keys::*;
use crate::structs::*;

#[derive(Clone, Copy)]
pub struct ImmutabledtagState {
    pub(crate) id: i32,
}

impl ImmutabledtagState {
    pub fn number_of_images(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_STATE_NUMBER_OF_IMAGES))
    }

    pub fn owner(&self) -> ScImmutableAgentID {
        ScImmutableAgentID::new(self.id, idx_map(IDX_STATE_OWNER))
    }

    pub fn plays_per_image(&self) -> ArrayOfImmutableInt16 {
        let arr_id = get_object_id(self.id, idx_map(IDX_STATE_PLAYS_PER_IMAGE), TYPE_ARRAY | TYPE_INT16);
        ArrayOfImmutableInt16 { obj_id: arr_id }
    }

    pub fn processed_images(&self) -> ArrayOfImmutableTaggedImage {
        let arr_id = get_object_id(self.id, idx_map(IDX_STATE_PROCESSED_IMAGES), TYPE_ARRAY | TYPE_BYTES);
        ArrayOfImmutableTaggedImage { obj_id: arr_id }
    }

    pub fn tagged_images(&self) -> ArrayOfImmutableTaggedImage {
        let arr_id = get_object_id(self.id, idx_map(IDX_STATE_TAGGED_IMAGES), TYPE_ARRAY | TYPE_BYTES);
        ArrayOfImmutableTaggedImage { obj_id: arr_id }
    }
}

#[derive(Clone, Copy)]
pub struct MutabledtagState {
    pub(crate) id: i32,
}

impl MutabledtagState {
    pub fn number_of_images(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_STATE_NUMBER_OF_IMAGES))
    }

    pub fn owner(&self) -> ScMutableAgentID {
        ScMutableAgentID::new(self.id, idx_map(IDX_STATE_OWNER))
    }

    pub fn plays_per_image(&self) -> ArrayOfMutableInt16 {
        let arr_id = get_object_id(self.id, idx_map(IDX_STATE_PLAYS_PER_IMAGE), TYPE_ARRAY | TYPE_INT16);
        ArrayOfMutableInt16 { obj_id: arr_id }
    }

    pub fn processed_images(&self) -> ArrayOfMutableTaggedImage {
        let arr_id = get_object_id(self.id, idx_map(IDX_STATE_PROCESSED_IMAGES), TYPE_ARRAY | TYPE_BYTES);
        ArrayOfMutableTaggedImage { obj_id: arr_id }
    }

    pub fn tagged_images(&self) -> ArrayOfMutableTaggedImage {
        let arr_id = get_object_id(self.id, idx_map(IDX_STATE_TAGGED_IMAGES), TYPE_ARRAY | TYPE_BYTES);
        ArrayOfMutableTaggedImage { obj_id: arr_id }
    }
}
