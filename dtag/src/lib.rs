// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

// @formatter:off

#![allow(dead_code)]
#![allow(unused_imports)]

use dtag::*;
use wasmlib::*;
use wasmlib::host::*;

use crate::consts::*;
use crate::keys::*;
use crate::params::*;
use crate::results::*;
use crate::state::*;

mod consts;
mod contract;
mod keys;
mod params;
mod results;
mod state;
mod structs;
mod dtag;

#[no_mangle]
fn on_load() {
    let exports = ScExports::new();
    exports.add_func(FUNC_ASSIGN_IMAGE, func_assign_image_thunk);
    exports.add_func(FUNC_CREATE_GAME, func_create_game_thunk);
    exports.add_func(FUNC_END_GAME, func_end_game_thunk);
    exports.add_func(FUNC_INIT, func_init_thunk);
    exports.add_func(FUNC_REQUEST_PLAY, func_request_play_thunk);
    exports.add_func(FUNC_SEND_TAG, func_send_tag_thunk);
    exports.add_view(VIEW_GET_PLAYS_PER_IMAGE, view_get_plays_per_image_thunk);
    exports.add_view(VIEW_GET_RESULTS, view_get_results_thunk);
    exports.add_view(VIEW_GET_TAGGED_IMAGES, view_get_tagged_images_thunk);

    unsafe {
        for i in 0..KEY_MAP_LEN {
            IDX_MAP[i] = get_key_id_from_string(KEY_MAP[i]);
        }
    }
}

pub struct AssignImageContext {
    params: ImmutableAssignImageParams,
    state:  MutabledtagState,
}

fn func_assign_image_thunk(ctx: &ScFuncContext) {
    ctx.log("dtag.funcAssignImage");
    // only SC itself can invoke this function
    ctx.require(ctx.caller() == ctx.account_id(), "no permission");

    let f = AssignImageContext {
        params: ImmutableAssignImageParams {
            id: OBJ_ID_PARAMS,
        },
        state: MutabledtagState {
            id: OBJ_ID_STATE,
        },
    };
    ctx.require(f.params.image_id().exists(), "missing mandatory imageId");
    func_assign_image(ctx, &f);
    ctx.log("dtag.funcAssignImage ok");
}

pub struct CreateGameContext {
    params: ImmutableCreateGameParams,
    state:  MutabledtagState,
}

fn func_create_game_thunk(ctx: &ScFuncContext) {
    ctx.log("dtag.funcCreateGame");
    let f = CreateGameContext {
        params: ImmutableCreateGameParams {
            id: OBJ_ID_PARAMS,
        },
        state: MutabledtagState {
            id: OBJ_ID_STATE,
        },
    };
    ctx.require(f.params.description().exists(), "missing mandatory description");
    ctx.require(f.params.number_of_images().exists(), "missing mandatory numberOfImages");
    func_create_game(ctx, &f);
    ctx.log("dtag.funcCreateGame ok");
}

pub struct EndGameContext {
    state: MutabledtagState,
}

fn func_end_game_thunk(ctx: &ScFuncContext) {
    ctx.log("dtag.funcEndGame");
    let f = EndGameContext {
        state: MutabledtagState {
            id: OBJ_ID_STATE,
        },
    };
    func_end_game(ctx, &f);
    ctx.log("dtag.funcEndGame ok");
}

pub struct InitContext {
    params: ImmutableInitParams,
    state:  MutabledtagState,
}

fn func_init_thunk(ctx: &ScFuncContext) {
    ctx.log("dtag.funcInit");
    let f = InitContext {
        params: ImmutableInitParams {
            id: OBJ_ID_PARAMS,
        },
        state: MutabledtagState {
            id: OBJ_ID_STATE,
        },
    };
    func_init(ctx, &f);
    ctx.log("dtag.funcInit ok");
}

pub struct RequestPlayContext {
    state: MutabledtagState,
}

fn func_request_play_thunk(ctx: &ScFuncContext) {
    ctx.log("dtag.funcRequestPlay");
    let f = RequestPlayContext {
        state: MutabledtagState {
            id: OBJ_ID_STATE,
        },
    };
    func_request_play(ctx, &f);
    ctx.log("dtag.funcRequestPlay ok");
}

pub struct SendTagContext {
    params: ImmutableSendTagParams,
    state:  MutabledtagState,
}

fn func_send_tag_thunk(ctx: &ScFuncContext) {
    ctx.log("dtag.funcSendTag");
    let f = SendTagContext {
        params: ImmutableSendTagParams {
            id: OBJ_ID_PARAMS,
        },
        state: MutabledtagState {
            id: OBJ_ID_STATE,
        },
    };
    ctx.require(f.params.tag().exists(), "missing mandatory tag");
    func_send_tag(ctx, &f);
    ctx.log("dtag.funcSendTag ok");
}

pub struct GetPlaysPerImageContext {
    results: MutableGetPlaysPerImageResults,
    state:   ImmutabledtagState,
}

fn view_get_plays_per_image_thunk(ctx: &ScViewContext) {
    ctx.log("dtag.viewGetPlaysPerImage");
    let f = GetPlaysPerImageContext {
        results: MutableGetPlaysPerImageResults {
            id: OBJ_ID_RESULTS,
        },
        state: ImmutabledtagState {
            id: OBJ_ID_STATE,
        },
    };
    view_get_plays_per_image(ctx, &f);
    ctx.log("dtag.viewGetPlaysPerImage ok");
}

pub struct GetResultsContext {
    results: MutableGetResultsResults,
    state:   ImmutabledtagState,
}

fn view_get_results_thunk(ctx: &ScViewContext) {
    ctx.log("dtag.viewGetResults");
    let f = GetResultsContext {
        results: MutableGetResultsResults {
            id: OBJ_ID_RESULTS,
        },
        state: ImmutabledtagState {
            id: OBJ_ID_STATE,
        },
    };
    view_get_results(ctx, &f);
    ctx.log("dtag.viewGetResults ok");
}

pub struct GetTaggedImagesContext {
    results: MutableGetTaggedImagesResults,
    state:   ImmutabledtagState,
}

fn view_get_tagged_images_thunk(ctx: &ScViewContext) {
    ctx.log("dtag.viewGetTaggedImages");
    let f = GetTaggedImagesContext {
        results: MutableGetTaggedImagesResults {
            id: OBJ_ID_RESULTS,
        },
        state: ImmutabledtagState {
            id: OBJ_ID_STATE,
        },
    };
    view_get_tagged_images(ctx, &f);
    ctx.log("dtag.viewGetTaggedImages ok");
}

// @formatter:on
