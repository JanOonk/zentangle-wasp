// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

// @formatter:off

#![allow(dead_code)]

use std::ptr;

use wasmlib::*;

use crate::consts::*;
use crate::params::*;
use crate::results::*;

pub struct AssignImageCall {
    pub func:   ScFunc,
    pub params: MutableAssignImageParams,
}

pub struct CreateGameCall {
    pub func:   ScFunc,
    pub params: MutableCreateGameParams,
}

pub struct EndGameCall {
    pub func: ScFunc,
}

pub struct InitCall {
    pub func:   ScInitFunc,
    pub params: MutableInitParams,
}

pub struct RequestPlayCall {
    pub func: ScFunc,
}

pub struct SendTagCall {
    pub func:   ScFunc,
    pub params: MutableSendTagParams,
}

pub struct GetPlaysPerImageCall {
    pub func:    ScView,
    pub results: ImmutableGetPlaysPerImageResults,
}

pub struct GetResultsCall {
    pub func:    ScView,
    pub results: ImmutableGetResultsResults,
}

pub struct GetTaggedImagesCall {
    pub func:    ScView,
    pub results: ImmutableGetTaggedImagesResults,
}

pub struct ScFuncs {
}

impl ScFuncs {
    pub fn assign_image(_ctx: & dyn ScFuncCallContext) -> AssignImageCall {
        let mut f = AssignImageCall {
            func:   ScFunc::new(HSC_NAME, HFUNC_ASSIGN_IMAGE),
            params: MutableAssignImageParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
    pub fn create_game(_ctx: & dyn ScFuncCallContext) -> CreateGameCall {
        let mut f = CreateGameCall {
            func:   ScFunc::new(HSC_NAME, HFUNC_CREATE_GAME),
            params: MutableCreateGameParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
    pub fn end_game(_ctx: & dyn ScFuncCallContext) -> EndGameCall {
        EndGameCall {
            func: ScFunc::new(HSC_NAME, HFUNC_END_GAME),
        }
    }
    pub fn init(_ctx: & dyn ScFuncCallContext) -> InitCall {
        let mut f = InitCall {
            func:   ScInitFunc::new(HSC_NAME, HFUNC_INIT),
            params: MutableInitParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
    pub fn request_play(_ctx: & dyn ScFuncCallContext) -> RequestPlayCall {
        RequestPlayCall {
            func: ScFunc::new(HSC_NAME, HFUNC_REQUEST_PLAY),
        }
    }
    pub fn send_tag(_ctx: & dyn ScFuncCallContext) -> SendTagCall {
        let mut f = SendTagCall {
            func:   ScFunc::new(HSC_NAME, HFUNC_SEND_TAG),
            params: MutableSendTagParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
    pub fn get_plays_per_image(_ctx: & dyn ScViewCallContext) -> GetPlaysPerImageCall {
        let mut f = GetPlaysPerImageCall {
            func:    ScView::new(HSC_NAME, HVIEW_GET_PLAYS_PER_IMAGE),
            results: ImmutableGetPlaysPerImageResults { id: 0 },
        };
        f.func.set_ptrs(ptr::null_mut(), &mut f.results.id);
        f
    }
    pub fn get_results(_ctx: & dyn ScViewCallContext) -> GetResultsCall {
        let mut f = GetResultsCall {
            func:    ScView::new(HSC_NAME, HVIEW_GET_RESULTS),
            results: ImmutableGetResultsResults { id: 0 },
        };
        f.func.set_ptrs(ptr::null_mut(), &mut f.results.id);
        f
    }
    pub fn get_tagged_images(_ctx: & dyn ScViewCallContext) -> GetTaggedImagesCall {
        let mut f = GetTaggedImagesCall {
            func:    ScView::new(HSC_NAME, HVIEW_GET_TAGGED_IMAGES),
            results: ImmutableGetTaggedImagesResults { id: 0 },
        };
        f.func.set_ptrs(ptr::null_mut(), &mut f.results.id);
        f
    }
}

// @formatter:on
