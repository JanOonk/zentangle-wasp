// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package dtag

import "github.com/iotaledger/wasp/packages/vm/wasmlib/go/wasmlib"

type ArrayOfImmutableBet struct {
	objID int32
}

func (a ArrayOfImmutableBet) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfImmutableBet) GetBet(index int32) ImmutableBet {
	return ImmutableBet{objID: a.objID, keyID: wasmlib.Key32(index)}
}

type ArrayOfImmutableInt32 struct {
	objID int32
}

func (a ArrayOfImmutableInt32) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfImmutableInt32) GetInt32(index int32) wasmlib.ScImmutableInt32 {
	return wasmlib.NewScImmutableInt32(a.objID, wasmlib.Key32(index))
}

type ArrayOfImmutableTaggedImage struct {
	objID int32
}

func (a ArrayOfImmutableTaggedImage) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfImmutableTaggedImage) GetTaggedImage(index int32) ImmutableTaggedImage {
	return ImmutableTaggedImage{objID: a.objID, keyID: wasmlib.Key32(index)}
}

type ArrayOfImmutableValidTag struct {
	objID int32
}

func (a ArrayOfImmutableValidTag) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfImmutableValidTag) GetValidTag(index int32) ImmutableValidTag {
	return ImmutableValidTag{objID: a.objID, keyID: wasmlib.Key32(index)}
}

type ImmutabledtagState struct {
	id int32
}

func (s ImmutabledtagState) Bets() ArrayOfImmutableBet {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateBets], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfImmutableBet{objID: arrID}
}

func (s ImmutabledtagState) Creator() wasmlib.ScImmutableAgentID {
	return wasmlib.NewScImmutableAgentID(s.id, idxMap[IdxStateCreator])
}

func (s ImmutabledtagState) Description() wasmlib.ScImmutableString {
	return wasmlib.NewScImmutableString(s.id, idxMap[IdxStateDescription])
}

func (s ImmutabledtagState) NumberOfImages() wasmlib.ScImmutableInt32 {
	return wasmlib.NewScImmutableInt32(s.id, idxMap[IdxStateNumberOfImages])
}

func (s ImmutabledtagState) Owner() wasmlib.ScImmutableAgentID {
	return wasmlib.NewScImmutableAgentID(s.id, idxMap[IdxStateOwner])
}

func (s ImmutabledtagState) PendingPlays() ArrayOfImmutableBet {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStatePendingPlays], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfImmutableBet{objID: arrID}
}

func (s ImmutabledtagState) PlaysPerImage() ArrayOfImmutableInt32 {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStatePlaysPerImage], wasmlib.TYPE_ARRAY|wasmlib.TYPE_INT32)
	return ArrayOfImmutableInt32{objID: arrID}
}

func (s ImmutabledtagState) ProcessedImages() ArrayOfImmutableTaggedImage {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateProcessedImages], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfImmutableTaggedImage{objID: arrID}
}

func (s ImmutabledtagState) Reward() wasmlib.ScImmutableInt64 {
	return wasmlib.NewScImmutableInt64(s.id, idxMap[IdxStateReward])
}

func (s ImmutabledtagState) TaggedImages() ArrayOfImmutableTaggedImage {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateTaggedImages], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfImmutableTaggedImage{objID: arrID}
}

func (s ImmutabledtagState) TagsRequiredPerImage() wasmlib.ScImmutableInt32 {
	return wasmlib.NewScImmutableInt32(s.id, idxMap[IdxStateTagsRequiredPerImage])
}

func (s ImmutabledtagState) ValidTags() ArrayOfImmutableValidTag {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateValidTags], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfImmutableValidTag{objID: arrID}
}

type ArrayOfMutableBet struct {
	objID int32
}

func (a ArrayOfMutableBet) Clear() {
	wasmlib.Clear(a.objID)
}

func (a ArrayOfMutableBet) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfMutableBet) GetBet(index int32) MutableBet {
	return MutableBet{objID: a.objID, keyID: wasmlib.Key32(index)}
}

type ArrayOfMutableInt32 struct {
	objID int32
}

func (a ArrayOfMutableInt32) Clear() {
	wasmlib.Clear(a.objID)
}

func (a ArrayOfMutableInt32) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfMutableInt32) GetInt32(index int32) wasmlib.ScMutableInt32 {
	return wasmlib.NewScMutableInt32(a.objID, wasmlib.Key32(index))
}

type ArrayOfMutableTaggedImage struct {
	objID int32
}

func (a ArrayOfMutableTaggedImage) Clear() {
	wasmlib.Clear(a.objID)
}

func (a ArrayOfMutableTaggedImage) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfMutableTaggedImage) GetTaggedImage(index int32) MutableTaggedImage {
	return MutableTaggedImage{objID: a.objID, keyID: wasmlib.Key32(index)}
}

type ArrayOfMutableValidTag struct {
	objID int32
}

func (a ArrayOfMutableValidTag) Clear() {
	wasmlib.Clear(a.objID)
}

func (a ArrayOfMutableValidTag) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfMutableValidTag) GetValidTag(index int32) MutableValidTag {
	return MutableValidTag{objID: a.objID, keyID: wasmlib.Key32(index)}
}

type MutabledtagState struct {
	id int32
}

func (s MutabledtagState) Bets() ArrayOfMutableBet {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateBets], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfMutableBet{objID: arrID}
}

func (s MutabledtagState) Creator() wasmlib.ScMutableAgentID {
	return wasmlib.NewScMutableAgentID(s.id, idxMap[IdxStateCreator])
}

func (s MutabledtagState) Description() wasmlib.ScMutableString {
	return wasmlib.NewScMutableString(s.id, idxMap[IdxStateDescription])
}

func (s MutabledtagState) NumberOfImages() wasmlib.ScMutableInt32 {
	return wasmlib.NewScMutableInt32(s.id, idxMap[IdxStateNumberOfImages])
}

func (s MutabledtagState) Owner() wasmlib.ScMutableAgentID {
	return wasmlib.NewScMutableAgentID(s.id, idxMap[IdxStateOwner])
}

func (s MutabledtagState) PendingPlays() ArrayOfMutableBet {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStatePendingPlays], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfMutableBet{objID: arrID}
}

func (s MutabledtagState) PlaysPerImage() ArrayOfMutableInt32 {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStatePlaysPerImage], wasmlib.TYPE_ARRAY|wasmlib.TYPE_INT32)
	return ArrayOfMutableInt32{objID: arrID}
}

func (s MutabledtagState) ProcessedImages() ArrayOfMutableTaggedImage {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateProcessedImages], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfMutableTaggedImage{objID: arrID}
}

func (s MutabledtagState) Reward() wasmlib.ScMutableInt64 {
	return wasmlib.NewScMutableInt64(s.id, idxMap[IdxStateReward])
}

func (s MutabledtagState) TaggedImages() ArrayOfMutableTaggedImage {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateTaggedImages], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfMutableTaggedImage{objID: arrID}
}

func (s MutabledtagState) TagsRequiredPerImage() wasmlib.ScMutableInt32 {
	return wasmlib.NewScMutableInt32(s.id, idxMap[IdxStateTagsRequiredPerImage])
}

func (s MutabledtagState) ValidTags() ArrayOfMutableValidTag {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateValidTags], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfMutableValidTag{objID: arrID}
}
