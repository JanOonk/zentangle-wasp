// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

//nolint:dupl
package dtag

import "github.com/iotaledger/wasp/packages/vm/wasmlib/go/wasmlib"

func OnLoad() {
	exports := wasmlib.NewScExports()
	exports.AddFunc(FuncCreateGame,       funcCreateGameThunk)
	exports.AddFunc(FuncEndGame,          funcEndGameThunk)
	exports.AddFunc(FuncRequestPlay,      funcRequestPlayThunk)
	exports.AddFunc(FuncSendTags,         funcSendTagsThunk)
	exports.AddView(ViewGetPlayerBets,    viewGetPlayerBetsThunk)
	exports.AddView(ViewGetPlaysPerImage, viewGetPlaysPerImageThunk)
	exports.AddView(ViewGetResults,       viewGetResultsThunk)

	for i, key := range keyMap {
		idxMap[i] = key.KeyID()
	}
}

type CreateGameContext struct {
	Params  ImmutableCreateGameParams
	State   MutabledtagState
}

func funcCreateGameThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("dtag.funcCreateGame")
	f := &CreateGameContext{
		Params: ImmutableCreateGameParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutabledtagState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Description().Exists(), "missing mandatory description")
	ctx.Require(f.Params.NumberOfImages().Exists(), "missing mandatory numberOfImages")
	funcCreateGame(ctx, f)
	ctx.Log("dtag.funcCreateGame ok")
}

type EndGameContext struct {
	State   MutabledtagState
}

func funcEndGameThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("dtag.funcEndGame")
	f := &EndGameContext{
		State: MutabledtagState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	funcEndGame(ctx, f)
	ctx.Log("dtag.funcEndGame ok")
}

type RequestPlayContext struct {
	Results MutableRequestPlayResults
	State   MutabledtagState
}

func funcRequestPlayThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("dtag.funcRequestPlay")
	f := &RequestPlayContext{
		Results: MutableRequestPlayResults{
			id: wasmlib.OBJ_ID_RESULTS,
		},
		State: MutabledtagState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	funcRequestPlay(ctx, f)
	ctx.Log("dtag.funcRequestPlay ok")
}

type SendTagsContext struct {
	Params  ImmutableSendTagsParams
	State   MutabledtagState
}

func funcSendTagsThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("dtag.funcSendTags")
	f := &SendTagsContext{
		Params: ImmutableSendTagsParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutabledtagState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.H().Exists(), "missing mandatory h")
	ctx.Require(f.Params.W().Exists(), "missing mandatory w")
	ctx.Require(f.Params.X().Exists(), "missing mandatory x")
	ctx.Require(f.Params.Y().Exists(), "missing mandatory y")
	funcSendTags(ctx, f)
	ctx.Log("dtag.funcSendTags ok")
}

type GetPlayerBetsContext struct {
	Results MutableGetPlayerBetsResults
	State   ImmutabledtagState
}

func viewGetPlayerBetsThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("dtag.viewGetPlayerBets")
	f := &GetPlayerBetsContext{
		Results: MutableGetPlayerBetsResults{
			id: wasmlib.OBJ_ID_RESULTS,
		},
		State: ImmutabledtagState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	viewGetPlayerBets(ctx, f)
	ctx.Log("dtag.viewGetPlayerBets ok")
}

type GetPlaysPerImageContext struct {
	Params  ImmutableGetPlaysPerImageParams
	Results MutableGetPlaysPerImageResults
	State   ImmutabledtagState
}

func viewGetPlaysPerImageThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("dtag.viewGetPlaysPerImage")
	f := &GetPlaysPerImageContext{
		Params: ImmutableGetPlaysPerImageParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		Results: MutableGetPlaysPerImageResults{
			id: wasmlib.OBJ_ID_RESULTS,
		},
		State: ImmutabledtagState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.ImageId().Exists(), "missing mandatory imageId")
	viewGetPlaysPerImage(ctx, f)
	ctx.Log("dtag.viewGetPlaysPerImage ok")
}

type GetResultsContext struct {
	Params  ImmutableGetResultsParams
	Results MutableGetResultsResults
	State   ImmutabledtagState
}

func viewGetResultsThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("dtag.viewGetResults")
	f := &GetResultsContext{
		Params: ImmutableGetResultsParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		Results: MutableGetResultsResults{
			id: wasmlib.OBJ_ID_RESULTS,
		},
		State: ImmutabledtagState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.ImageId().Exists(), "missing mandatory imageId")
	viewGetResults(ctx, f)
	ctx.Log("dtag.viewGetResults ok")
}
