{
	"name": "dtag",
	"description": "Incentivized AI Training Casino",
	"structs": {
		"TaggedImage": {
			"imageId": "Int32",
			"player": "AgentID // player that has tagged this image",
			"boost":"Int32 // if the tag will be boosted or not",
			"x": "Int64 // x top-left position of the Tag TODO: This should be a nested constructor in the future",
			"y": "Int64 // y top-left position of the Tag",
			"w": "Int64 // width of the Tag",
			"h": "Int64 // height of the Tag"
		},
		"Bet": {
			"amount": "Int64",
			"player": "AgentID // player placing the bet",
			"imageId": "Int32"
		}
	},
	"typedefs": {},
	"state": {
		"owner": "AgentID // current owner of this smart contract",
		"numberOfImages": "Int32 // total number of images to tag",
		"reward": "Int64 // current reward to split between players",
		"description": "String // details on how should the images be tagged",
		"creator": "AgentID // the creator of the game",
		"tagsRequiredPerImage": "Int32 // Images have to be tagged by this amount of players to be ready",
		"bets": "Bet[]",
		"pendingPlays": "Bet[] // List of Plays that have been requested but not completed",
		"playsPerImage": "Int32[] // counts how many times an image has been tagged",
		"taggedImages": "TaggedImage[] // a list with every TaggedImage (many per imageId) TODO: Ideally a nested array when it gets implemented",
		"processedImages": "TaggedImage[]"
	},
	"funcs": {
		"init": { 
			"params": { 
				"owner": "AgentID? // optional owner of this smart contract"
			}	
		},
		"setOwner": { 
			"access": "owner // current owner of this smart contract",
			"params": { 
				"owner": "AgentID // new owner of this smart contract"
			}
		},
		"withdraw": {
			"access": "owner // current owner of this smart contract"
		},
		"createGame": {
			"params": {
				"numberOfImages": "Int32 // total number of images to tag",
				"description": "String // details on how should the images be tagged",
				"tagsRequiredPerImage":"Int32? // Images have to be tagged by this amount of players to be ready"
			}
		},
		"requestPlay": {
			"results": {
				"imageId": "Int32"
			}
		},
		"sendTags": {
			"params": {
				"x": "Int64 // x top-left position of the Tag TODO: This should be a constructor in the future",
				"y": "Int64 // y top-left position of the Tag",
				"h": "Int64 // height of the Tag",
				"w": "Int64 // width of the Tag",
				"boost": "Int32? // if the tag will be boosted or not"
			}
		},
		"endGame": {
		}
	},
	"views": {
		"getOwner": { 
    		"results": { 
      			"owner": "AgentID // current owner of this smart contract"
			}
		},
		"getPlaysPerImage": {
			"params": {
				"imageId": "Int32"
			},
			"results": {
				"playsPerImage": "Int32"
			}
		},
		"getResults": {
			"params": {
				"imageId": "Int32"
			},
			"results": {
				"results": "String // x/y/h/w"
			}
		},
		"getPlayerBets": { 
			"results": {
				"playerBets": "String // a json with all players and their bets"
			}
		}
	}
}