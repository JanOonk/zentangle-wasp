// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as sc from "./index";

export class ApproveCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncApprove);
	params: sc.MutableApproveParams = new sc.MutableApproveParams();
}

export class ApproveContext {
	events:  sc.Erc721Events = new sc.Erc721Events();
	params: sc.ImmutableApproveParams = new sc.ImmutableApproveParams();
	state: sc.MutableErc721State = new sc.MutableErc721State();
}

export class BurnCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncBurn);
	params: sc.MutableBurnParams = new sc.MutableBurnParams();
}

export class BurnContext {
	events:  sc.Erc721Events = new sc.Erc721Events();
	params: sc.ImmutableBurnParams = new sc.ImmutableBurnParams();
	state: sc.MutableErc721State = new sc.MutableErc721State();
}

export class InitCall {
	func: wasmlib.ScInitFunc = new wasmlib.ScInitFunc(sc.HScName, sc.HFuncInit);
	params: sc.MutableInitParams = new sc.MutableInitParams();
}

export class InitContext {
	events:  sc.Erc721Events = new sc.Erc721Events();
	params: sc.ImmutableInitParams = new sc.ImmutableInitParams();
	state: sc.MutableErc721State = new sc.MutableErc721State();
}

export class MintCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncMint);
	params: sc.MutableMintParams = new sc.MutableMintParams();
}

export class MintContext {
	events:  sc.Erc721Events = new sc.Erc721Events();
	params: sc.ImmutableMintParams = new sc.ImmutableMintParams();
	state: sc.MutableErc721State = new sc.MutableErc721State();
}

export class SafeTransferFromCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncSafeTransferFrom);
	params: sc.MutableSafeTransferFromParams = new sc.MutableSafeTransferFromParams();
}

export class SafeTransferFromContext {
	events:  sc.Erc721Events = new sc.Erc721Events();
	params: sc.ImmutableSafeTransferFromParams = new sc.ImmutableSafeTransferFromParams();
	state: sc.MutableErc721State = new sc.MutableErc721State();
}

export class SetApprovalForAllCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncSetApprovalForAll);
	params: sc.MutableSetApprovalForAllParams = new sc.MutableSetApprovalForAllParams();
}

export class SetApprovalForAllContext {
	events:  sc.Erc721Events = new sc.Erc721Events();
	params: sc.ImmutableSetApprovalForAllParams = new sc.ImmutableSetApprovalForAllParams();
	state: sc.MutableErc721State = new sc.MutableErc721State();
}

export class TransferFromCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncTransferFrom);
	params: sc.MutableTransferFromParams = new sc.MutableTransferFromParams();
}

export class TransferFromContext {
	events:  sc.Erc721Events = new sc.Erc721Events();
	params: sc.ImmutableTransferFromParams = new sc.ImmutableTransferFromParams();
	state: sc.MutableErc721State = new sc.MutableErc721State();
}

export class BalanceOfCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewBalanceOf);
	params: sc.MutableBalanceOfParams = new sc.MutableBalanceOfParams();
	results: sc.ImmutableBalanceOfResults = new sc.ImmutableBalanceOfResults();
}

export class BalanceOfContext {
	params: sc.ImmutableBalanceOfParams = new sc.ImmutableBalanceOfParams();
	results: sc.MutableBalanceOfResults = new sc.MutableBalanceOfResults();
	state: sc.ImmutableErc721State = new sc.ImmutableErc721State();
}

export class GetApprovedCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetApproved);
	params: sc.MutableGetApprovedParams = new sc.MutableGetApprovedParams();
	results: sc.ImmutableGetApprovedResults = new sc.ImmutableGetApprovedResults();
}

export class GetApprovedContext {
	params: sc.ImmutableGetApprovedParams = new sc.ImmutableGetApprovedParams();
	results: sc.MutableGetApprovedResults = new sc.MutableGetApprovedResults();
	state: sc.ImmutableErc721State = new sc.ImmutableErc721State();
}

export class IsApprovedForAllCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewIsApprovedForAll);
	params: sc.MutableIsApprovedForAllParams = new sc.MutableIsApprovedForAllParams();
	results: sc.ImmutableIsApprovedForAllResults = new sc.ImmutableIsApprovedForAllResults();
}

export class IsApprovedForAllContext {
	params: sc.ImmutableIsApprovedForAllParams = new sc.ImmutableIsApprovedForAllParams();
	results: sc.MutableIsApprovedForAllResults = new sc.MutableIsApprovedForAllResults();
	state: sc.ImmutableErc721State = new sc.ImmutableErc721State();
}

export class NameCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewName);
	results: sc.ImmutableNameResults = new sc.ImmutableNameResults();
}

export class NameContext {
	results: sc.MutableNameResults = new sc.MutableNameResults();
	state: sc.ImmutableErc721State = new sc.ImmutableErc721State();
}

export class OwnerOfCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewOwnerOf);
	params: sc.MutableOwnerOfParams = new sc.MutableOwnerOfParams();
	results: sc.ImmutableOwnerOfResults = new sc.ImmutableOwnerOfResults();
}

export class OwnerOfContext {
	params: sc.ImmutableOwnerOfParams = new sc.ImmutableOwnerOfParams();
	results: sc.MutableOwnerOfResults = new sc.MutableOwnerOfResults();
	state: sc.ImmutableErc721State = new sc.ImmutableErc721State();
}

export class SymbolCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewSymbol);
	results: sc.ImmutableSymbolResults = new sc.ImmutableSymbolResults();
}

export class SymbolContext {
	results: sc.MutableSymbolResults = new sc.MutableSymbolResults();
	state: sc.ImmutableErc721State = new sc.ImmutableErc721State();
}

export class TokenURICall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewTokenURI);
	params: sc.MutableTokenURIParams = new sc.MutableTokenURIParams();
	results: sc.ImmutableTokenURIResults = new sc.ImmutableTokenURIResults();
}

export class TokenURIContext {
	params: sc.ImmutableTokenURIParams = new sc.ImmutableTokenURIParams();
	results: sc.MutableTokenURIResults = new sc.MutableTokenURIResults();
	state: sc.ImmutableErc721State = new sc.ImmutableErc721State();
}

export class ScFuncs {
    static approve(ctx: wasmlib.ScFuncCallContext): ApproveCall {
        let f = new ApproveCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static burn(ctx: wasmlib.ScFuncCallContext): BurnCall {
        let f = new BurnCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static init(ctx: wasmlib.ScFuncCallContext): InitCall {
        let f = new InitCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static mint(ctx: wasmlib.ScFuncCallContext): MintCall {
        let f = new MintCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static safeTransferFrom(ctx: wasmlib.ScFuncCallContext): SafeTransferFromCall {
        let f = new SafeTransferFromCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static setApprovalForAll(ctx: wasmlib.ScFuncCallContext): SetApprovalForAllCall {
        let f = new SetApprovalForAllCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static transferFrom(ctx: wasmlib.ScFuncCallContext): TransferFromCall {
        let f = new TransferFromCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static balanceOf(ctx: wasmlib.ScViewCallContext): BalanceOfCall {
        let f = new BalanceOfCall();
        f.func.setPtrs(f.params, f.results);
        return f;
    }

    static getApproved(ctx: wasmlib.ScViewCallContext): GetApprovedCall {
        let f = new GetApprovedCall();
        f.func.setPtrs(f.params, f.results);
        return f;
    }

    static isApprovedForAll(ctx: wasmlib.ScViewCallContext): IsApprovedForAllCall {
        let f = new IsApprovedForAllCall();
        f.func.setPtrs(f.params, f.results);
        return f;
    }

    static name(ctx: wasmlib.ScViewCallContext): NameCall {
        let f = new NameCall();
        f.func.setPtrs(null, f.results);
        return f;
    }

    static ownerOf(ctx: wasmlib.ScViewCallContext): OwnerOfCall {
        let f = new OwnerOfCall();
        f.func.setPtrs(f.params, f.results);
        return f;
    }

    static symbol(ctx: wasmlib.ScViewCallContext): SymbolCall {
        let f = new SymbolCall();
        f.func.setPtrs(null, f.results);
        return f;
    }

    static tokenURI(ctx: wasmlib.ScViewCallContext): TokenURICall {
        let f = new TokenURICall();
        f.func.setPtrs(f.params, f.results);
        return f;
    }
}
