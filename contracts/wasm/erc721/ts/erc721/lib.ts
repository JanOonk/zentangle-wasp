// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as sc from "./index";

export function on_call(index: i32): void {
    return wasmlib.onCall(index);
}

export function on_load(): void {
    let exports = new wasmlib.ScExports();
    exports.addFunc(sc.FuncApprove,           funcApproveThunk);
    exports.addFunc(sc.FuncBurn,              funcBurnThunk);
    exports.addFunc(sc.FuncInit,              funcInitThunk);
    exports.addFunc(sc.FuncMint,              funcMintThunk);
    exports.addFunc(sc.FuncSafeTransferFrom,  funcSafeTransferFromThunk);
    exports.addFunc(sc.FuncSetApprovalForAll, funcSetApprovalForAllThunk);
    exports.addFunc(sc.FuncTransferFrom,      funcTransferFromThunk);
    exports.addView(sc.ViewBalanceOf,         viewBalanceOfThunk);
    exports.addView(sc.ViewGetApproved,       viewGetApprovedThunk);
    exports.addView(sc.ViewIsApprovedForAll,  viewIsApprovedForAllThunk);
    exports.addView(sc.ViewName,              viewNameThunk);
    exports.addView(sc.ViewOwnerOf,           viewOwnerOfThunk);
    exports.addView(sc.ViewSymbol,            viewSymbolThunk);
    exports.addView(sc.ViewTokenURI,          viewTokenURIThunk);

    for (let i = 0; i < sc.keyMap.length; i++) {
        sc.idxMap[i] = wasmlib.Key32.fromString(sc.keyMap[i]);
    }
}

function funcApproveThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("erc721.funcApprove");
	let f = new sc.ApproveContext();
    f.params.mapID = wasmlib.OBJ_ID_PARAMS;
    f.state.mapID = wasmlib.OBJ_ID_STATE;
	ctx.require(f.params.tokenID().exists(), "missing mandatory tokenID");
	sc.funcApprove(ctx, f);
	ctx.log("erc721.funcApprove ok");
}

function funcBurnThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("erc721.funcBurn");
	let f = new sc.BurnContext();
    f.params.mapID = wasmlib.OBJ_ID_PARAMS;
    f.state.mapID = wasmlib.OBJ_ID_STATE;
	ctx.require(f.params.tokenID().exists(), "missing mandatory tokenID");
	sc.funcBurn(ctx, f);
	ctx.log("erc721.funcBurn ok");
}

function funcInitThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("erc721.funcInit");
	let f = new sc.InitContext();
    f.params.mapID = wasmlib.OBJ_ID_PARAMS;
    f.state.mapID = wasmlib.OBJ_ID_STATE;
	ctx.require(f.params.name().exists(), "missing mandatory name");
	ctx.require(f.params.symbol().exists(), "missing mandatory symbol");
	sc.funcInit(ctx, f);
	ctx.log("erc721.funcInit ok");
}

function funcMintThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("erc721.funcMint");
	let f = new sc.MintContext();
    f.params.mapID = wasmlib.OBJ_ID_PARAMS;
    f.state.mapID = wasmlib.OBJ_ID_STATE;
	ctx.require(f.params.tokenID().exists(), "missing mandatory tokenID");
	sc.funcMint(ctx, f);
	ctx.log("erc721.funcMint ok");
}

function funcSafeTransferFromThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("erc721.funcSafeTransferFrom");
	let f = new sc.SafeTransferFromContext();
    f.params.mapID = wasmlib.OBJ_ID_PARAMS;
    f.state.mapID = wasmlib.OBJ_ID_STATE;
	ctx.require(f.params.from().exists(), "missing mandatory from");
	ctx.require(f.params.to().exists(), "missing mandatory to");
	ctx.require(f.params.tokenID().exists(), "missing mandatory tokenID");
	sc.funcSafeTransferFrom(ctx, f);
	ctx.log("erc721.funcSafeTransferFrom ok");
}

function funcSetApprovalForAllThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("erc721.funcSetApprovalForAll");
	let f = new sc.SetApprovalForAllContext();
    f.params.mapID = wasmlib.OBJ_ID_PARAMS;
    f.state.mapID = wasmlib.OBJ_ID_STATE;
	ctx.require(f.params.approval().exists(), "missing mandatory approval");
	ctx.require(f.params.operator().exists(), "missing mandatory operator");
	sc.funcSetApprovalForAll(ctx, f);
	ctx.log("erc721.funcSetApprovalForAll ok");
}

function funcTransferFromThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("erc721.funcTransferFrom");
	let f = new sc.TransferFromContext();
    f.params.mapID = wasmlib.OBJ_ID_PARAMS;
    f.state.mapID = wasmlib.OBJ_ID_STATE;
	ctx.require(f.params.from().exists(), "missing mandatory from");
	ctx.require(f.params.to().exists(), "missing mandatory to");
	ctx.require(f.params.tokenID().exists(), "missing mandatory tokenID");
	sc.funcTransferFrom(ctx, f);
	ctx.log("erc721.funcTransferFrom ok");
}

function viewBalanceOfThunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("erc721.viewBalanceOf");
	let f = new sc.BalanceOfContext();
    f.params.mapID = wasmlib.OBJ_ID_PARAMS;
    f.results.mapID = wasmlib.OBJ_ID_RESULTS;
    f.state.mapID = wasmlib.OBJ_ID_STATE;
	ctx.require(f.params.owner().exists(), "missing mandatory owner");
	sc.viewBalanceOf(ctx, f);
	ctx.log("erc721.viewBalanceOf ok");
}

function viewGetApprovedThunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("erc721.viewGetApproved");
	let f = new sc.GetApprovedContext();
    f.params.mapID = wasmlib.OBJ_ID_PARAMS;
    f.results.mapID = wasmlib.OBJ_ID_RESULTS;
    f.state.mapID = wasmlib.OBJ_ID_STATE;
	ctx.require(f.params.tokenID().exists(), "missing mandatory tokenID");
	sc.viewGetApproved(ctx, f);
	ctx.log("erc721.viewGetApproved ok");
}

function viewIsApprovedForAllThunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("erc721.viewIsApprovedForAll");
	let f = new sc.IsApprovedForAllContext();
    f.params.mapID = wasmlib.OBJ_ID_PARAMS;
    f.results.mapID = wasmlib.OBJ_ID_RESULTS;
    f.state.mapID = wasmlib.OBJ_ID_STATE;
	ctx.require(f.params.operator().exists(), "missing mandatory operator");
	ctx.require(f.params.owner().exists(), "missing mandatory owner");
	sc.viewIsApprovedForAll(ctx, f);
	ctx.log("erc721.viewIsApprovedForAll ok");
}

function viewNameThunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("erc721.viewName");
	let f = new sc.NameContext();
    f.results.mapID = wasmlib.OBJ_ID_RESULTS;
    f.state.mapID = wasmlib.OBJ_ID_STATE;
	sc.viewName(ctx, f);
	ctx.log("erc721.viewName ok");
}

function viewOwnerOfThunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("erc721.viewOwnerOf");
	let f = new sc.OwnerOfContext();
    f.params.mapID = wasmlib.OBJ_ID_PARAMS;
    f.results.mapID = wasmlib.OBJ_ID_RESULTS;
    f.state.mapID = wasmlib.OBJ_ID_STATE;
	ctx.require(f.params.tokenID().exists(), "missing mandatory tokenID");
	sc.viewOwnerOf(ctx, f);
	ctx.log("erc721.viewOwnerOf ok");
}

function viewSymbolThunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("erc721.viewSymbol");
	let f = new sc.SymbolContext();
    f.results.mapID = wasmlib.OBJ_ID_RESULTS;
    f.state.mapID = wasmlib.OBJ_ID_STATE;
	sc.viewSymbol(ctx, f);
	ctx.log("erc721.viewSymbol ok");
}

function viewTokenURIThunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("erc721.viewTokenURI");
	let f = new sc.TokenURIContext();
    f.params.mapID = wasmlib.OBJ_ID_PARAMS;
    f.results.mapID = wasmlib.OBJ_ID_RESULTS;
    f.state.mapID = wasmlib.OBJ_ID_STATE;
	ctx.require(f.params.tokenID().exists(), "missing mandatory tokenID");
	sc.viewTokenURI(ctx, f);
	ctx.log("erc721.viewTokenURI ok");
}
