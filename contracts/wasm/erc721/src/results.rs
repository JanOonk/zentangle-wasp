// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;

use crate::*;
use crate::keys::*;
use crate::typedefs::*;

#[derive(Clone, Copy)]
pub struct ImmutableBalanceOfResults {
    pub(crate) id: i32,
}

impl ImmutableBalanceOfResults {
    pub fn amount(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.id, idx_map(IDX_RESULT_AMOUNT))
	}
}

#[derive(Clone, Copy)]
pub struct MutableBalanceOfResults {
    pub(crate) id: i32,
}

impl MutableBalanceOfResults {
    pub fn amount(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.id, idx_map(IDX_RESULT_AMOUNT))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableGetApprovedResults {
    pub(crate) id: i32,
}

impl ImmutableGetApprovedResults {
    pub fn approved(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.id, idx_map(IDX_RESULT_APPROVED))
	}
}

#[derive(Clone, Copy)]
pub struct MutableGetApprovedResults {
    pub(crate) id: i32,
}

impl MutableGetApprovedResults {
    pub fn approved(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.id, idx_map(IDX_RESULT_APPROVED))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableIsApprovedForAllResults {
    pub(crate) id: i32,
}

impl ImmutableIsApprovedForAllResults {
    pub fn approval(&self) -> ScImmutableBool {
		ScImmutableBool::new(self.id, idx_map(IDX_RESULT_APPROVAL))
	}
}

#[derive(Clone, Copy)]
pub struct MutableIsApprovedForAllResults {
    pub(crate) id: i32,
}

impl MutableIsApprovedForAllResults {
    pub fn approval(&self) -> ScMutableBool {
		ScMutableBool::new(self.id, idx_map(IDX_RESULT_APPROVAL))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableNameResults {
    pub(crate) id: i32,
}

impl ImmutableNameResults {
    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, idx_map(IDX_RESULT_NAME))
	}
}

#[derive(Clone, Copy)]
pub struct MutableNameResults {
    pub(crate) id: i32,
}

impl MutableNameResults {
    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.id, idx_map(IDX_RESULT_NAME))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableOwnerOfResults {
    pub(crate) id: i32,
}

impl ImmutableOwnerOfResults {
    pub fn owner(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.id, idx_map(IDX_RESULT_OWNER))
	}
}

#[derive(Clone, Copy)]
pub struct MutableOwnerOfResults {
    pub(crate) id: i32,
}

impl MutableOwnerOfResults {
    pub fn owner(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.id, idx_map(IDX_RESULT_OWNER))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableSymbolResults {
    pub(crate) id: i32,
}

impl ImmutableSymbolResults {
    pub fn symbol(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, idx_map(IDX_RESULT_SYMBOL))
	}
}

#[derive(Clone, Copy)]
pub struct MutableSymbolResults {
    pub(crate) id: i32,
}

impl MutableSymbolResults {
    pub fn symbol(&self) -> ScMutableString {
		ScMutableString::new(self.id, idx_map(IDX_RESULT_SYMBOL))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableTokenURIResults {
    pub(crate) id: i32,
}

impl ImmutableTokenURIResults {
    pub fn token_uri(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, idx_map(IDX_RESULT_TOKEN_URI))
	}
}

#[derive(Clone, Copy)]
pub struct MutableTokenURIResults {
    pub(crate) id: i32,
}

impl MutableTokenURIResults {
    pub fn token_uri(&self) -> ScMutableString {
		ScMutableString::new(self.id, idx_map(IDX_RESULT_TOKEN_URI))
	}
}
