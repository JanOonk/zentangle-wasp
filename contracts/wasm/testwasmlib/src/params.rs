// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;

use crate::*;
use crate::keys::*;
use crate::typedefs::*;

#[derive(Clone, Copy)]
pub struct ImmutableArrayClearParams {
    pub(crate) id: i32,
}

impl ImmutableArrayClearParams {
    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, idx_map(IDX_PARAM_NAME))
	}
}

#[derive(Clone, Copy)]
pub struct MutableArrayClearParams {
    pub(crate) id: i32,
}

impl MutableArrayClearParams {
    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.id, idx_map(IDX_PARAM_NAME))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableArrayCreateParams {
    pub(crate) id: i32,
}

impl ImmutableArrayCreateParams {
    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, idx_map(IDX_PARAM_NAME))
	}
}

#[derive(Clone, Copy)]
pub struct MutableArrayCreateParams {
    pub(crate) id: i32,
}

impl MutableArrayCreateParams {
    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.id, idx_map(IDX_PARAM_NAME))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableArraySetParams {
    pub(crate) id: i32,
}

impl ImmutableArraySetParams {
    pub fn index(&self) -> ScImmutableInt32 {
		ScImmutableInt32::new(self.id, idx_map(IDX_PARAM_INDEX))
	}

    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, idx_map(IDX_PARAM_NAME))
	}

    pub fn value(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, idx_map(IDX_PARAM_VALUE))
	}
}

#[derive(Clone, Copy)]
pub struct MutableArraySetParams {
    pub(crate) id: i32,
}

impl MutableArraySetParams {
    pub fn index(&self) -> ScMutableInt32 {
		ScMutableInt32::new(self.id, idx_map(IDX_PARAM_INDEX))
	}

    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.id, idx_map(IDX_PARAM_NAME))
	}

    pub fn value(&self) -> ScMutableString {
		ScMutableString::new(self.id, idx_map(IDX_PARAM_VALUE))
	}
}

#[derive(Clone, Copy)]
pub struct MapStringToImmutableBytes {
	pub(crate) obj_id: i32,
}

impl MapStringToImmutableBytes {
    pub fn get_bytes(&self, key: &str) -> ScImmutableBytes {
        ScImmutableBytes::new(self.obj_id, key.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableParamTypesParams {
    pub(crate) id: i32,
}

impl ImmutableParamTypesParams {
    pub fn address(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.id, idx_map(IDX_PARAM_ADDRESS))
	}

    pub fn agent_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.id, idx_map(IDX_PARAM_AGENT_ID))
	}

    pub fn bool(&self) -> ScImmutableBool {
		ScImmutableBool::new(self.id, idx_map(IDX_PARAM_BOOL))
	}

    pub fn bytes(&self) -> ScImmutableBytes {
		ScImmutableBytes::new(self.id, idx_map(IDX_PARAM_BYTES))
	}

    pub fn chain_id(&self) -> ScImmutableChainID {
		ScImmutableChainID::new(self.id, idx_map(IDX_PARAM_CHAIN_ID))
	}

    pub fn color(&self) -> ScImmutableColor {
		ScImmutableColor::new(self.id, idx_map(IDX_PARAM_COLOR))
	}

    pub fn hash(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.id, idx_map(IDX_PARAM_HASH))
	}

    pub fn hname(&self) -> ScImmutableHname {
		ScImmutableHname::new(self.id, idx_map(IDX_PARAM_HNAME))
	}

    pub fn int16(&self) -> ScImmutableInt16 {
		ScImmutableInt16::new(self.id, idx_map(IDX_PARAM_INT16))
	}

    pub fn int32(&self) -> ScImmutableInt32 {
		ScImmutableInt32::new(self.id, idx_map(IDX_PARAM_INT32))
	}

    pub fn int64(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.id, idx_map(IDX_PARAM_INT64))
	}

    pub fn int8(&self) -> ScImmutableInt8 {
		ScImmutableInt8::new(self.id, idx_map(IDX_PARAM_INT8))
	}

    pub fn param(&self) -> MapStringToImmutableBytes {
		MapStringToImmutableBytes { obj_id: self.id }
	}

    pub fn request_id(&self) -> ScImmutableRequestID {
		ScImmutableRequestID::new(self.id, idx_map(IDX_PARAM_REQUEST_ID))
	}

    pub fn string(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, idx_map(IDX_PARAM_STRING))
	}

    pub fn uint16(&self) -> ScImmutableUint16 {
		ScImmutableUint16::new(self.id, idx_map(IDX_PARAM_UINT16))
	}

    pub fn uint32(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.id, idx_map(IDX_PARAM_UINT32))
	}

    pub fn uint64(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.id, idx_map(IDX_PARAM_UINT64))
	}

    pub fn uint8(&self) -> ScImmutableUint8 {
		ScImmutableUint8::new(self.id, idx_map(IDX_PARAM_UINT8))
	}
}

#[derive(Clone, Copy)]
pub struct MapStringToMutableBytes {
	pub(crate) obj_id: i32,
}

impl MapStringToMutableBytes {
    pub fn clear(&self) {
        clear(self.obj_id);
    }

    pub fn get_bytes(&self, key: &str) -> ScMutableBytes {
        ScMutableBytes::new(self.obj_id, key.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableParamTypesParams {
    pub(crate) id: i32,
}

impl MutableParamTypesParams {
    pub fn address(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.id, idx_map(IDX_PARAM_ADDRESS))
	}

    pub fn agent_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.id, idx_map(IDX_PARAM_AGENT_ID))
	}

    pub fn bool(&self) -> ScMutableBool {
		ScMutableBool::new(self.id, idx_map(IDX_PARAM_BOOL))
	}

    pub fn bytes(&self) -> ScMutableBytes {
		ScMutableBytes::new(self.id, idx_map(IDX_PARAM_BYTES))
	}

    pub fn chain_id(&self) -> ScMutableChainID {
		ScMutableChainID::new(self.id, idx_map(IDX_PARAM_CHAIN_ID))
	}

    pub fn color(&self) -> ScMutableColor {
		ScMutableColor::new(self.id, idx_map(IDX_PARAM_COLOR))
	}

    pub fn hash(&self) -> ScMutableHash {
		ScMutableHash::new(self.id, idx_map(IDX_PARAM_HASH))
	}

    pub fn hname(&self) -> ScMutableHname {
		ScMutableHname::new(self.id, idx_map(IDX_PARAM_HNAME))
	}

    pub fn int16(&self) -> ScMutableInt16 {
		ScMutableInt16::new(self.id, idx_map(IDX_PARAM_INT16))
	}

    pub fn int32(&self) -> ScMutableInt32 {
		ScMutableInt32::new(self.id, idx_map(IDX_PARAM_INT32))
	}

    pub fn int64(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.id, idx_map(IDX_PARAM_INT64))
	}

    pub fn int8(&self) -> ScMutableInt8 {
		ScMutableInt8::new(self.id, idx_map(IDX_PARAM_INT8))
	}

    pub fn param(&self) -> MapStringToMutableBytes {
		MapStringToMutableBytes { obj_id: self.id }
	}

    pub fn request_id(&self) -> ScMutableRequestID {
		ScMutableRequestID::new(self.id, idx_map(IDX_PARAM_REQUEST_ID))
	}

    pub fn string(&self) -> ScMutableString {
		ScMutableString::new(self.id, idx_map(IDX_PARAM_STRING))
	}

    pub fn uint16(&self) -> ScMutableUint16 {
		ScMutableUint16::new(self.id, idx_map(IDX_PARAM_UINT16))
	}

    pub fn uint32(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.id, idx_map(IDX_PARAM_UINT32))
	}

    pub fn uint64(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.id, idx_map(IDX_PARAM_UINT64))
	}

    pub fn uint8(&self) -> ScMutableUint8 {
		ScMutableUint8::new(self.id, idx_map(IDX_PARAM_UINT8))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableTriggerEventParams {
    pub(crate) id: i32,
}

impl ImmutableTriggerEventParams {
    pub fn address(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.id, idx_map(IDX_PARAM_ADDRESS))
	}

    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, idx_map(IDX_PARAM_NAME))
	}
}

#[derive(Clone, Copy)]
pub struct MutableTriggerEventParams {
    pub(crate) id: i32,
}

impl MutableTriggerEventParams {
    pub fn address(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.id, idx_map(IDX_PARAM_ADDRESS))
	}

    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.id, idx_map(IDX_PARAM_NAME))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableArrayLengthParams {
    pub(crate) id: i32,
}

impl ImmutableArrayLengthParams {
    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, idx_map(IDX_PARAM_NAME))
	}
}

#[derive(Clone, Copy)]
pub struct MutableArrayLengthParams {
    pub(crate) id: i32,
}

impl MutableArrayLengthParams {
    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.id, idx_map(IDX_PARAM_NAME))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableArrayValueParams {
    pub(crate) id: i32,
}

impl ImmutableArrayValueParams {
    pub fn index(&self) -> ScImmutableInt32 {
		ScImmutableInt32::new(self.id, idx_map(IDX_PARAM_INDEX))
	}

    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, idx_map(IDX_PARAM_NAME))
	}
}

#[derive(Clone, Copy)]
pub struct MutableArrayValueParams {
    pub(crate) id: i32,
}

impl MutableArrayValueParams {
    pub fn index(&self) -> ScMutableInt32 {
		ScMutableInt32::new(self.id, idx_map(IDX_PARAM_INDEX))
	}

    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.id, idx_map(IDX_PARAM_NAME))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableBlockRecordParams {
    pub(crate) id: i32,
}

impl ImmutableBlockRecordParams {
    pub fn block_index(&self) -> ScImmutableInt32 {
		ScImmutableInt32::new(self.id, idx_map(IDX_PARAM_BLOCK_INDEX))
	}

    pub fn record_index(&self) -> ScImmutableInt32 {
		ScImmutableInt32::new(self.id, idx_map(IDX_PARAM_RECORD_INDEX))
	}
}

#[derive(Clone, Copy)]
pub struct MutableBlockRecordParams {
    pub(crate) id: i32,
}

impl MutableBlockRecordParams {
    pub fn block_index(&self) -> ScMutableInt32 {
		ScMutableInt32::new(self.id, idx_map(IDX_PARAM_BLOCK_INDEX))
	}

    pub fn record_index(&self) -> ScMutableInt32 {
		ScMutableInt32::new(self.id, idx_map(IDX_PARAM_RECORD_INDEX))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableBlockRecordsParams {
    pub(crate) id: i32,
}

impl ImmutableBlockRecordsParams {
    pub fn block_index(&self) -> ScImmutableInt32 {
		ScImmutableInt32::new(self.id, idx_map(IDX_PARAM_BLOCK_INDEX))
	}
}

#[derive(Clone, Copy)]
pub struct MutableBlockRecordsParams {
    pub(crate) id: i32,
}

impl MutableBlockRecordsParams {
    pub fn block_index(&self) -> ScMutableInt32 {
		ScMutableInt32::new(self.id, idx_map(IDX_PARAM_BLOCK_INDEX))
	}
}
