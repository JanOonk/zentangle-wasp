// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;
use crate::typedefs::*;

pub struct Location {
    pub x : i32, 
    pub y : i32, 
}

impl Location {
    pub fn from_bytes(bytes: &[u8]) -> Location {
        let mut decode = BytesDecoder::new(bytes);
        Location {
            x : decode.int32(),
            y : decode.int32(),
        }
    }

    pub fn to_bytes(&self) -> Vec<u8> {
        let mut encode = BytesEncoder::new();
		encode.int32(self.x);
		encode.int32(self.y);
        return encode.data();
    }
}

pub struct ImmutableLocation {
    pub(crate) obj_id: i32,
    pub(crate) key_id: Key32,
}

impl ImmutableLocation {
    pub fn exists(&self) -> bool {
        exists(self.obj_id, self.key_id, TYPE_BYTES)
    }

    pub fn value(&self) -> Location {
        Location::from_bytes(&get_bytes(self.obj_id, self.key_id, TYPE_BYTES))
    }
}

pub struct MutableLocation {
    pub(crate) obj_id: i32,
    pub(crate) key_id: Key32,
}

impl MutableLocation {
    pub fn delete(&self) {
        del_key(self.obj_id, self.key_id, TYPE_BYTES);
    }

    pub fn exists(&self) -> bool {
        exists(self.obj_id, self.key_id, TYPE_BYTES)
    }

    pub fn set_value(&self, value: &Location) {
        set_bytes(self.obj_id, self.key_id, TYPE_BYTES, &value.to_bytes());
    }

    pub fn value(&self) -> Location {
        Location::from_bytes(&get_bytes(self.obj_id, self.key_id, TYPE_BYTES))
    }
}
